[
  {
    "filePath": "",
    "messages": [
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'foo' is never reassigned. Use 'const' instead.",
        "line": 1,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 1,
        "endColumn": 8,
        "fix": {
          "range": [
            0,
            17
          ],
          "text": "const foo = \"adsf\";"
        }
      },
      {
        "ruleId": "@typescript-eslint/quotes",
        "severity": 2,
        "message": "Strings must use singlequote.",
        "line": 1,
        "column": 11,
        "nodeType": "Literal",
        "messageId": "wrongQuotes",
        "endLine": 1,
        "endColumn": 17,
        "fix": {
          "range": [
            10,
            16
          ],
          "text": "'adsf'"
        }
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'bar' is never reassigned. Use 'const' instead.",
        "line": 3,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 3,
        "endColumn": 8,
        "fix": {
          "range": [
            36,
            53
          ],
          "text": "const bar = \"adsf\";"
        }
      },
      {
        "ruleId": "unused-imports/no-unused-vars",
        "severity": 2,
        "message": "'bar' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/quotes",
        "severity": 2,
        "message": "Strings must use singlequote.",
        "line": 3,
        "column": 11,
        "nodeType": "Literal",
        "messageId": "wrongQuotes",
        "endLine": 3,
        "endColumn": 17,
        "fix": {
          "range": [
            46,
            52
          ],
          "text": "'adsf'"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 4,
    "fixableWarningCount": 0,
    "source": "let foo = \"adsf\";\nconsole.log(foo);\nlet bar = \"adsf\";\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/comma-dangle",
        "replacedBy": [
          "@stylistic/ts/comma-dangle"
        ]
      },
      {
        "ruleId": "@typescript-eslint/func-call-spacing",
        "replacedBy": [
          "@stylistic/ts/func-call-spacing"
        ]
      },
      {
        "ruleId": "@typescript-eslint/keyword-spacing",
        "replacedBy": [
          "@stylistic/ts/keyword-spacing"
        ]
      },
      {
        "ruleId": "@typescript-eslint/member-delimiter-style",
        "replacedBy": [
          "@stylistic/ts/member-delimiter-style"
        ]
      },
      {
        "ruleId": "@typescript-eslint/object-curly-spacing",
        "replacedBy": [
          "@stylistic/ts/object-curly-spacing"
        ]
      },
      {
        "ruleId": "@typescript-eslint/quotes",
        "replacedBy": [
          "@stylistic/ts/quotes"
        ]
      },
      {
        "ruleId": "block-spacing",
        "replacedBy": []
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": []
      },
      {
        "ruleId": "arrow-parens",
        "replacedBy": []
      },
      {
        "ruleId": "lines-between-class-members",
        "replacedBy": []
      },
      {
        "ruleId": "max-len",
        "replacedBy": []
      },
      {
        "ruleId": "no-multiple-empty-lines",
        "replacedBy": []
      },
      {
        "ruleId": "no-trailing-spaces",
        "replacedBy": []
      },
      {
        "ruleId": "quote-props",
        "replacedBy": []
      },
      {
        "ruleId": "space-in-parens",
        "replacedBy": []
      },
      {
        "ruleId": "@typescript-eslint/brace-style",
        "replacedBy": [
          "@stylistic/ts/brace-style"
        ]
      },
      {
        "ruleId": "@typescript-eslint/comma-spacing",
        "replacedBy": [
          "@stylistic/ts/comma-spacing"
        ]
      },
      {
        "ruleId": "@typescript-eslint/indent",
        "replacedBy": [
          "@stylistic/ts/indent"
        ]
      },
      {
        "ruleId": "@typescript-eslint/lines-between-class-members",
        "replacedBy": [
          "@stylistic/ts/lines-between-class-members"
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-extra-semi",
        "replacedBy": [
          "@stylistic/ts/no-extra-semi"
        ]
      },
      {
        "ruleId": "@typescript-eslint/space-before-blocks",
        "replacedBy": [
          "@stylistic/ts/space-before-blocks"
        ]
      },
      {
        "ruleId": "@typescript-eslint/semi",
        "replacedBy": [
          "@stylistic/ts/semi"
        ]
      },
      {
        "ruleId": "@typescript-eslint/space-before-function-paren",
        "replacedBy": [
          "@stylistic/ts/space-before-function-paren"
        ]
      },
      {
        "ruleId": "@typescript-eslint/space-infix-ops",
        "replacedBy": [
          "@stylistic/ts/space-infix-ops"
        ]
      }
    ]
  }
]